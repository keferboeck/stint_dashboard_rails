<!-- app/views/admin/settings/show.html.erb -->
<div class="max-w-3xl mx-auto space-y-8">
  <h1 class="text-h3">Settings</h1>

  <!-- General -->
  <div class="border border-white/10 rounded-lg p-5 space-y-4">
    <h2 class="text-h4">General</h2>
    <%= form_with model: @settings, url: admin_settings_path, method: :patch, class: "space-y-4" do |f| %>
      <div>
        <%= f.label :timezone, "Send emails according to timezone", class: "block text-sm mb-1" %>
        <%= f.select :timezone, [["Europe/London","Europe/London"]], {}, class: "w-full bg-white/5 border border-white/10 rounded px-3 py-2" %>
      </div>
      <%= f.submit "Save", class: "px-4 py-2 rounded bg-brand-green text-black font-medium" %>
    <% end %>
  </div>

  <!-- Safety Controls -->
  <turbo-frame id="safety_frame">
    <%= render "admin/settings/safety", settings: @settings %>
  </turbo-frame>
</div>

<!-- Vanilla JS (no bundlers) -->
<script nonce="<%= content_security_policy_nonce %>">
    (function() {
        const csrf = document.querySelector('meta[name="csrf-token"]')?.content;

        async function req(url, method, body) {
            const res = await fetch(url, {
                method,
                headers: {
                    'Accept': 'application/json',
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrf
                },
                body: body ? JSON.stringify(body) : null,
                credentials: 'same-origin'
            });
            let data = {};
            try { data = await res.json(); } catch (_) {}
            if (!res.ok) throw new Error(data.error || `Request failed (${res.status})`);
            return data;
        }

        // Hold all
        const holdBtn = document.getElementById('hold-btn');
        const holdStatus = document.getElementById('hold-status');
        if (holdBtn && holdStatus) {
            holdBtn.addEventListener('click', async () => {
                if (!confirm("Are you sure? This pauses all sending.")) return;
                holdBtn.disabled = true;
                try {
                    const data = await req(holdBtn.dataset.endpoint, 'POST');
                    holdStatus.textContent = data.scheduling_on_hold ? "ON HOLD" : "ACTIVE";
                    holdBtn.textContent    = data.scheduling_on_hold ? "Already on hold" : "Hold all";
                    holdBtn.disabled       = !!data.scheduling_on_hold;
                } catch (e) {
                    alert(e.message || "Failed to put on hold");
                    holdBtn.disabled = false;
                }
            });
        }

        // Purge future
        const purgeBtn = document.getElementById('purge-btn');
        if (purgeBtn) {
            purgeBtn.addEventListener('click', async () => {
                if (!confirm("Really delete future campaigns?")) return;
                purgeBtn.disabled = true;
                try {
                    const data = await req(purgeBtn.dataset.endpoint, 'DELETE', { confirm: "YES" });
                    alert(`Purged ${data.purged} future campaign(s).`);
                } catch (e) {
                    alert(e.message || "Purge failed");
                } finally {
                    purgeBtn.disabled = false;
                }
            });
        }

        // Toggle cron
        const cronBtn = document.getElementById('cron-btn');
        const cronStatus = document.getElementById('cron-status');
        if (cronBtn && cronStatus) {
            cronBtn.addEventListener('click', async () => {
                cronBtn.disabled = true;
                try {
                    const data = await req(cronBtn.dataset.endpoint, 'POST');
                    const enabled = !!data.cron_enabled;
                    cronStatus.textContent = enabled ? "ENABLED" : "DISABLED";
                    cronBtn.textContent    = enabled ? "Disable cron" : "Enable cron";
                } catch (e) {
                    alert(e.message || "Failed to toggle cron");
                } finally {
                    cronBtn.disabled = false;
                }
            });
        }
    })();
</script>